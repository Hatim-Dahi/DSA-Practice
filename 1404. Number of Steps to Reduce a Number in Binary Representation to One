class Solution {
    public int numSteps(String s) {
        int steps = 0;
        int carry = 0;  // Represents the carry that might be generated during addition.

        // Traverse the string from the end (least significant bit) to the beginning.
        for (int i = s.length() - 1; i > 0; i--) {
            if (s.charAt(i) - '0' + carry == 1) {
                // If the current bit plus carry is 1, it means it's odd.
                steps += 2; // We need one step to add 1 and another to divide by 2.
                carry = 1;  // Setting the carry for the next iteration.
            } else {
                // If the current bit plus carry is 0 or 2, it means it's even.
                steps += 1; // Only one step to divide by 2.
            }
        }

        // Finally, account for the most significant bit (the '1' at the beginning).
        return steps + carry;
    }
}
